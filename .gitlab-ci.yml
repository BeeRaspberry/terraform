stages:
  - validate
  - plan
  - deploy

image:
  name: hashicorp/terraform:0.12.29
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  # Default output file for Terraform plan
variables:
  PLAN: plan.tfplan
  JSON_PLAN_FILE: tfplan.json
  PROVIDER_DIR: google
cache:
  paths:
    - .terraform
before_script:
  - apk update && apk add jq gnupg
  - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
  - cd $PROVIDER_DIR
  - gpg --batch --yes --passphrase="$PASS_PHRASE"
    --output github_credential.json 
    --decrypt github_credential.json.gpg
  - |
    cat <<EOF >terraform.tfvars
    project_id           = "$PROJECT_ID"
    bastion_members      = $BASTION_MEMBERS
    ip_source_ranges_ssh = $IP_SOURCE_RANGES_SSH
    cluster_name         = "$CLUSTER_NAME"
    cred_file            = "github_credential.json"
    EOF
  - terraform init

validate:
  stage: validate 
  script:
    - terraform validate

plan:
  stage: plan
  script:
    - terraform plan -out=$PLAN
    - "terraform show --json $PLAN | convert_report > $JSON_PLAN_FILE"
  artifacts:
    paths:
      - ./$PROVIDER_DIR/$PLAN
    reports:
      terraform: ./$PROVIDER_DIR/$JSON_PLAN_FILE

production:
  stage: deploy
  script:
    - terraform apply -input=false $PLAN
  dependencies:
    - plan
  when: manual
  only:
    - master
